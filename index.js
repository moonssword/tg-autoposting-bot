require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const config = require('./config');
const DB = require('./db');
const cron = require('node-cron');
const moment = require('moment');
const AWS = require('aws-sdk');

const bot = new TelegramBot(config.telegramBotToken, { polling: true });
const s3 = new AWS.S3();

function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

//postAds();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
async function postAds() {
    const maxPosts = config.maxPostsInPeriod;
    const channels = config.cityChannels;

    const cities = Object.keys(channels);
    const adsByCity = await DB.getAds(cities, maxPosts);

    const groupedAdsByCity = adsByCity.reduce((acc, ad) => {
        const city = ad.city.trim();
        if (!acc[city]) {
            acc[city] = [];
        }
        acc[city].push(ad);
        return acc;
    }, {});
    
    const logMessage = Object.entries(groupedAdsByCity)
    .map(([city, ads]) => `${city}: ${ads.length}`)
    .join('; ');

    console.log(logMessage);

        for (let i = 0; i < maxPosts; i++) {
        setTimeout(async () => {
            for (const [city, ads] of Object.entries(groupedAdsByCity)) {
                const channelId = channels[city];
                
                if (!channelId || ads.length === 0 || ads[i] === undefined) continue;
                const ad = ads[i];

                try {
                    const message = generateAdMessage(ad);
        
                    let mediaGroup;
                    if (config.photoType === 'original_with_wm') {
                        const photoURLs = ad.photos.slice(0, 10);
                        mediaGroup = photoURLs.map((url, index) => ({
                            type: 'photo',
                            media: url,
                            caption: index === 0 ? message : '',
                            parse_mode: 'Markdown'
                        }));
                    } else if (config.photoType === 'converted') {
                        const photoNames = ad.converted_photos.slice(0, 10);
                        mediaGroup = photoNames.map((name, index) => ({
                            type: 'photo',
                            media: `${config.s3domain}/images/${name}`,
                            caption: index === 0 ? message : '',
                            parse_mode: 'Markdown'
                        }));
                    } else {
                        const photoURLs = ad.converted_photos.slice(0, 10);
                        mediaGroup = photoURLs.map((url, index) => ({
                            type: 'photo',
                            media: url,
                            caption: index === 0 ? message : '',
                            parse_mode: 'Markdown'
                        }));
                    }

                    const messageGroup = await bot.sendMediaGroup(channelId, mediaGroup);
        
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–º–µ—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–º
                    const messageIds = messageGroup.map(message => message.message_id);
                    await DB.markAdAsPosted(ad.id, messageIds, channelId);
        
                    await delay(5000);
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
                }
            }
        }, i * config.postIntervalMinutes * 60 * 1000);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
function generateAdMessage(ad) {
    const roomTypeText = ad.room_type === 'room' ? '' : ad.room_type === 'bed_space' ? ' (–∫–æ–π–∫–æ-–º–µ—Å—Ç–æ)' : '';
    const roomLocationText = ad.room_location === 'apartment' ? '' :
                             ad.room_location === 'hostel' ? '–≤ —Ö–æ—Å—Ç–µ–ª–µ' :
                             ad.room_location === 'hotel' ? '–≤ –≥–æ—Å—Ç–∏–Ω–∏—Ü–µ' : '';

    const messageParts = [
        `üè† *–°–¥–∞–µ—Ç—Å—è* ${ad.house_type === 'apartment' ? ad.rooms + '-–∫–æ–º–Ω.–∫–≤–∞—Ä—Ç–∏—Ä–∞' : ad.house_type === 'room' ? '–∫–æ–º–Ω–∞—Ç–∞' + roomTypeText + (roomLocationText ? ' ' + roomLocationText : '') : '–¥–æ–º'} ${ad.duration === 'long_time' ? '–Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫' : '–ø–æ—Å—É—Ç–æ—á–Ω–æ'}${ad.area ? ', ' + ad.area + ' –º¬≤' : ''}${ad.floor_current ? `, ${ad.floor_current}${ad.floor_total ? '/' + ad.floor_total : ''} —ç—Ç–∞–∂` : ''}${ad.bed_capacity ? ', —Å–ø–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç - ' + ad.bed_capacity : ''}`,
        `*–ê–¥—Ä–µ—Å:* –≥.${ad.city}, ${ad.district ? ad.district + ' —Ä-–Ω' : ''} ${ad.microdistrict ? ', ' + ad.microdistrict : ''} ${ad.address ? ', ' + ad.address : ''}`,
        `*–°–¥–∞–µ—Ç:* ${ad.author === '–•–æ–∑—è–∏–Ω –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏' || ad.author === 'owner' ? '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫' : '–ø–æ—Å—Ä–µ–¥–Ω–∏–∫'}`,
        `*–¶–µ–Ω–∞:* ${ad.price} ‚Ç∏`,
        `*–ö–æ–Ω—Ç–∞–∫—Ç—ã:* ${ad.phone} ${[ad.whatsapp ? `[WhatsApp](https://api.whatsapp.com/send?phone=${ad.phone})` : '', ad.tg_username ? `[Telegram](https://t.me/${ad.tg_username})` : ''].filter(Boolean).join(' ')}`,
        `üõãÔ∏è *–£–¥–æ–±—Å—Ç–≤–∞*: ${[
            ad.toilet ? ad.toilet : '',
            ad.bathroom ? ad.bathroom : '',
            ad.furniture ? ad.furniture : '',
            ad.facilities ? ad.facilities : ''
        ].filter(Boolean).join(', ')}`,
        ad.rental_options ? `üìú *–ü—Ä–∞–≤–∏–ª–∞ –∑–∞—Å–µ–ª–µ–Ω–∏—è*: ${ad.rental_options}` : '',
        ad.condition ? `üß± *–°–æ—Å—Ç–æ—è–Ω–∏–µ*: ${ad.condition == '–¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏–π' ? '–¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏–π —Ä–µ–º–æ–Ω—Ç' : ad.condition }` : '',
        `üìù *–û–ø–∏—Å–∞–Ω–∏–µ*:\n${ad.description ? ad.description : ''}`,
    ];

    const message = messageParts.filter(Boolean).join('\n');                            

    const trimmedMessage = message.length > 1024 
                        ? message.substring(0, message.lastIndexOf(' ', 1024)) + '...' 
                        : message;

    return trimmedMessage;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram-–∫–∞–Ω–∞–ª–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function removeOutdatedAdsFromChannel() {
    console.log('–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —É–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π');
    const adsToDelete = await DB.getOutdatedAds();

    for (const ad of adsToDelete) {
        try {
            const messageIds = ad.message_id;
            let successDeleted = false;
            for (const messageId of messageIds) {
                try {
                    const deleteResult = await bot.deleteMessage(ad.tg_channel, messageId);
                    if (deleteResult) successDeleted = true;
                } catch (err) {
                    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞ ${ad.tg_channel} —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}:`, err);
                }
            }

            // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if (successDeleted) {
                await DB.markAdAsInactive(ad.id);
                console.log(`–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID ${ad.id} —É–¥–∞–ª–µ–Ω–æ, —Å—Ç–∞—Ç—É—Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω.`);

                // –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ S3 –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
                const photoNames = ad.converted_photos;
                await deleteImagesFromS3(photoNames);
            }
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${ad.message_id}:`, error);
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–∑ S3
async function deleteImagesFromS3(photoNames) {
    const deleteParams = {
        Bucket: config.s3bucketName,
        Delete: {
            Objects: photoNames.map((name) => ({ Key: `images/${name}` })),
            Quiet: false, // –ï—Å–ª–∏ true, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏, –Ω–æ –Ω–µ —É–¥–∞–ª—ë–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        }
    };

    try {
        const deleteResult = await s3.deleteObjects(deleteParams).promise();
        console.log('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ S3:', deleteResult);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ S3:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
function schedulePosts() {

    config.postTimes.forEach(time => {
        const [hour, minute] = time.split(':');
        console.log(`–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ ${hour}:${minute}`);

        // –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        cron.schedule(`${minute} ${hour} * * *`, async () => {
            console.log(`–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ ${time}`);
            await postAds();
        });
    });
}

// cron –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00
cron.schedule(config.cronSchedule, () => {
    console.log('–ó–∞–ø—É—Å–∫ —É–¥–∞–ª–µ–Ω–∏—è —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ 00:00');
    removeOutdatedAdsFromChannel();
});

schedulePosts();