require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const config = require('./config');
const DB = require('./db');
const cron = require('node-cron');
const moment = require('moment');

const bot = new TelegramBot(config.telegramBotToken, { polling: true });


function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
async function postAds() {
    const adsByCity = await DB.getAds();
    
    for (const [city, ads] of Object.entries(adsByCity)) {
        const channelId = config.cityChannels[city];
        if (!channelId || ads.length === 0) continue;

        const maxPosts = Math.min(config.maxPostsPerUpdate, ads.length);
         for (let i = 0; i < maxPosts; i++) {
            setTimeout(async () => {
                const ad = ads[i];
                try {
                    const message = `
        üè† *–°–¥–∞–µ—Ç—Å—è* ${data.house_type === 'apartment' ? data.rooms + '-–∫–æ–º–Ω.–∫–≤–∞—Ä—Ç–∏—Ä–∞' : data.house_type === 'room' ? '–∫–æ–º–Ω–∞—Ç–∞' + roomTypeText + (roomLocationText ? ' ' + roomLocationText : '') : '–¥–æ–º'} ${data.duration === 'long_time' ? '–Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫' : '–ø–æ—Å—É—Ç–æ—á–Ω–æ'}, ${data.area} –º¬≤, ${data.floor_current}/${data.floor_total} —ç—Ç–∞–∂${data.bed_capacity ? ', —Å–ø–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç - ' + data.bed_capacity : ''}
        *–ê–¥—Ä–µ—Å:* –≥.${data.city}, ${data.district} —Ä-–Ω, ${data.microdistrict ? data.microdistrict + ', ' : ''} ${data.address}
        *–°–¥–∞–µ—Ç:* ${data.author === 'owner' ? '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫': '–ø–æ—Å—Ä–µ–¥–Ω–∏–∫'}
        *–¶–µ–Ω–∞:* ${data.price} ‚Ç∏
        *–î–µ–ø–æ–∑–∏—Ç:* ${data.deposit ? `${data.deposit_value}%` : '–Ω–µ—Ç'}
        *–¢–µ–ª–µ—Ñ–æ–Ω:* ${data.phone} ${[ data.whatsapp ? `[WhatsApp](https://api.whatsapp.com/send?phone=${data.phone})` : '', data.tg_username ? `[Telegram](https://t.me/${data.tg_username})` : ''].filter(Boolean).join(' ')}
        üõãÔ∏è *–£–¥–æ–±—Å—Ç–≤–∞*: ${[
            data.fridge ? '—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫' : '',
            data.washing_machine ? '—Å—Ç–∏—Ä–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞' : '',
            data.microwave ? '–º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∞—è –ø–µ—á—å' : '',
            data.dishwasher ? '–ø–æ—Å—É–¥–æ–º–æ–µ—á–Ω–∞—è –º–∞—à–∏–Ω–∞' : '',
            data.iron ? '—É—Ç—é–≥' : '',
            data.tv ? '—Ç–µ–ª–µ–≤–∏–∑–æ—Ä' : '',
            data.wifi ? 'Wi-Fi' : '',
            data.stove ? '–ø–ª–∏—Ç–∞' : '',
            data.shower ? '–¥—É—à' : '',
            data.separate_toilet ? '—Ä–∞–∑–¥–µ–ª—å–Ω—ã–π —Å–∞–Ω—É–∑–µ–ª' : '',
            data.bed_linen ? '–ø–æ—Å—Ç–µ–ª—å–Ω–æ–µ –±–µ–ª—å–µ' : '',
            data.towels ? '–ø–æ–ª–æ—Ç–µ–Ω—Ü–∞' : '',
            data.hygiene_items ? '—Å—Ä–µ–¥—Å—Ç–≤–∞ –≥–∏–≥–∏–µ–Ω—ã' : '',
            data.kitchen ? '–∫—É—Ö–Ω—è' : '',
            data.wardrobe ? '—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–¥–µ–∂–¥—ã' : '',
            data.sleeping_places ? '—Å–ø–∞–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞' : ''
        ].filter(Boolean).join(', ')}
        üìú *–ü—Ä–∞–≤–∏–ª–∞ –∑–∞—Å–µ–ª–µ–Ω–∏—è*: ${[
            data.family ? '–¥–ª—è —Å–µ–º—å–∏' : '',
            data.single ? '–¥–ª—è –æ–¥–Ω–æ–≥–æ' : '',
            data.with_child ? '–º–æ–∂–Ω–æ —Å –¥–µ—Ç—å–º–∏' : '',
            data.with_pets ? '–º–æ–∂–Ω–æ —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏' : '',
            data.max_guests ? `–º–∞–∫—Å. –≥–æ—Å—Ç–µ–π: ${data.max_guests}` : ''
        ].filter(Boolean).join(', ')}
        üìù *–û–ø–∏—Å–∞–Ω–∏–µ*
        ${data.description}
        `;
        
                    const trimmedMessage = message.length > 1024 
                        ? message.substring(0, message.lastIndexOf(' ', 1024)) + '...' 
                        : message;
        
                    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–æ 10
                    /*const photoURLs = ad.photos.slice(0, 10);
                    const mediaGroup = photoURLs.map((url, index) => ({
                        type: 'photo',
                        media: url,
                        caption: index === 0 ? trimmedMessage : '',
                        parse_mode: 'Markdown'
                    }));*/
        
                    const photoNames = ad.converted_photos.slice(0, 10);
                    const mediaGroup = photoNames.map((name, index) => ({
                        type: 'photo',
                        media: `${config.s3domain}/images/${name}`,
                        caption: index === 0 ? trimmedMessage : '',
                        parse_mode: 'Markdown'
                    }));
        
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º —Å –º–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
                    const messageGroup = await bot.sendMediaGroup(config.channelId, mediaGroup);
        
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    const messageIds = messageGroup.map(message => message.message_id);
                    await DB.markAdAsPosted(ad.ad_id, messageIds);
        
                    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—É–∑—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1-2 —Å–µ–∫—É–Ω–¥—ã)
                    await delay(2000);
                } catch (error) {
                    if (error.response && error.response.statusCode === 429) {
                        const retryAfter = error.response.parameters?.retry_after || 30;
                        console.log(`–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –û–∂–∏–¥–∞–µ–º ${retryAfter} —Å–µ–∫—É–Ω–¥...`);
                        await delay(retryAfter * 1000); // –ñ–¥–µ–º, —Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç Telegram
                    } else {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
                    }
                }
         }, i * config.postIntervalMinutes * 60 * 1000);
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram-–∫–∞–Ω–∞–ª–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function removeOutdatedAdsFromChannel() {
    const adsToDelete = await DB.getOutdatedAds();

    for (const ad of adsToDelete) {
        try {
            const messageIds = ad.message_id;
            let successDeleted = false;
            for (const messageId of messageIds) {
                try {
                    const deleteResult = await bot.deleteMessage(config.channelId, messageId);
                    if (deleteResult) successDeleted = true;
                } catch (err) {
                    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞ ${config.channelId} —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}:`, err);
                }
            }

            // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if (successDeleted) {
                await DB.markAdAsInactive(ad.id);
                console.log(`–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID ${ad.id} —É–¥–∞–ª–µ–Ω–æ, —Å—Ç–∞—Ç—É—Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω.`);
            }
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${ad.message_id}:`, error);
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á
function schedulePosts() {
    config.postTimes.forEach(time => {
        const [hour, minute] = time.split(':');

        // –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        cron.schedule(`${minute} ${hour} * * *`, async () => {
            console.log(`–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ ${time}`);
            await postAdsForCitiesWithInterval();
        });
    });

    // –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∫–∞–∂–¥—É—é –Ω–æ—á—å –≤ 2:00
    cron.schedule('0 2 * * *', async () => {
        console.log('–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —É–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ 2:00');
        await removeOutdatedAdsFromChannel();
    });
}

schedulePosts();